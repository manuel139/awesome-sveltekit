/* eslint-disable no-console */
import fs from 'fs'
import yaml from 'js-yaml'
import fetch from 'node-fetch'
import { rootDir, titleToSlug } from './index.js'

const inPath = `${rootDir}/sites.yml`
const outPath = `${rootDir}/site/src/sites.js`

const sites = yaml.load(fs.readFileSync(inPath))

console.time(`Updated sites.js`)

const prevOut = fs.existsSync(outPath) ? await import(outPath) : { default: [] }
const { default: prevParsedSites, lastParsed } = prevOut

const daysSinceLastParse = Math.round(
  (new Date() - new Date(lastParsed)) / (1000 * 60 * 60 * 24)
)

const ymlHasMoreSites = sites.length > prevParsedSites.length

const seenSlugs = new Set()

// Only update site/src/sites.js if a new site was added to sites.yml
// or repo star counts were last fetched more than a month ago.
if (ymlHasMoreSites || daysSinceLastParse >= 30) {
  for (const site of sites) {
    const slug = titleToSlug(site.title)

    if (seenSlugs.has(slug)) throw new Error(`Duplicate slug ${slug}`)
    seenSlugs.add(slug)

    site.slug = slug
    if (!site.repo) continue

    const repoHandle = site.repo.split(`github.com/`)[1]
    const response = await fetch(`https://api.github.com/repos/${repoHandle}`)
    const json = await response.json()
    site.repoStars = json.stargazers_count
  }

  fs.writeFileSync(
    outPath,
    `// auto-generated by site/scripts/parseSitesYaml.js\n
export const lastParsed = "${new Date().toLocaleDateString(`eu`)}"\n
export default ${JSON.stringify(sites, null, 2)}`
  )

  console.timeEnd(`Updated sites.js`)
}
